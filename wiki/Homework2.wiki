#summary More design documentation

=Task 1:=
a. Outline a High level appropriate Design or Software Architecture for your project. How do the requirements match with the chosen architecture?

b. Identify the types of design goals or tasks that solve specific problems. From these identify the software patterns that will be useful in your project.

c. Prepare a complete UML based Software Design, with the following diagrams:

 * A Class diagram. ( Are the good classes in Task 1 in here? Explain.)
 * Use cases and corresponding Use Case diagrams
 * Sequence Diagrams
 * State Charts or Dynamic Diagrams
 * Collaboration Diagrams (optional)
 * Timing Diagrams (Optional)
 * Flow Charts for major complex methods (where needed)

d. Mark the portions of the diagram where the Voice of the Customer ( in requirements or otherwise) is addressed.

e. Organize the Software Design Document to follow the IEEE standards and augment the same with the various UML diagrams, by reference or link. Are other libraries, packages used in your design? If you have referred, used other work on the internet that directly bears on your work, do note the same so that credit is given to existing open work. Note how your work will differ from theirs.



=Task 2:= 
Note how you intend to address Test Driven Design/Implementation/Development.

a. Which of the above diagrams are candidates for testing during the development? Are there aspects of design that will never be tested? Mark these as potentially for future work and agility.

b. Create a list of major error categories for your project. (Recall these are not just the compiler errors. These are design errors, process mismatches, plan changes and mismatches, documentation faults, version changes, architectural glitches etc. Think of the various life cycle phases.) Track these errors and log these as these errors occur. Note their categories (types).

c. Address risk analysis for Use, Misuse and Abuse scenarios. Document the types of design/coding defects that could be great risks. Note in a table form the major types of risk handling you could implement.

d. Address future changes that stakeholders would seek For each stakeholder, list the possible use, misuse and abuses. What design measures do you have to address these risks?



=Task 3:=
Generate an Operational Profile of your design, for each of your major Use Cases. Recall that an Operational Profile prioritizes various portions of your design (by modules, classes, subsystems as appropriate). These priorities may be based on criticality, frequency of usage, and the effort needed to have a valid set.

=Task 4:=
For each stakeholder, layout the GUI as appropriate. Discuss the layout complexity/simplicity. Allocate review responsibilities as appropriate.

Calculate Design metrics such as the McCabeâ€™s Complexity, other Object Oriented Metrics, Cohesion metrics etc. based on your design diagrams. Note partial process metrics that will help the project development. Later, you will plot these at the end of the project.